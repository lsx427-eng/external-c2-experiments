package main

import (
	"flag"
	"os/exec"

	"github.com/vulncheck-oss/go-exploit"
	"github.com/vulncheck-oss/go-exploit/c2"
	"github.com/vulncheck-oss/go-exploit/c2/external"
	"github.com/vulncheck-oss/go-exploit/config"
	"github.com/vulncheck-oss/go-exploit/output"

	c2ssh "github.com/vulncheck-oss/external-c2-experiments/ssh"
)

type ExternalSSHTest struct{}

var flagPayload string

func (sploit ExternalSSHTest) ValidateTarget(_ *config.Config) bool {
	return false
}

func (sploit ExternalSSHTest) CheckVersion(_ *config.Config) exploit.VersionCheckType {
	return exploit.NotImplemented
}

func (sploit ExternalSSHTest) RunExploit(conf *config.Config) bool {
	if flagPayload == "" {
		output.PrintfStatus("Payload argument required")
		return false
	}
	cmd := exec.Command(flagPayload)
	_, err := cmd.CombinedOutput()
	if err != nil {
		output.PrintfError("%s", err.Error())
	}

	return true
}

func main() {
	flag.StringVar(&flagPayload, "payload", "", "Payload to execute")
	ext := external.GetInstance(c2ssh.Name)
	c2ssh.Configure(ext)
	supportedC2 := []c2.Impl{
		c2ssh.SSHServer,
		c2.SimpleShellServer,
	}

	conf := config.NewRemoteExploit(
		config.ImplementedFeatures{AssetDetection: false, VersionScanning: false, Exploitation: false},
		config.CodeExecution, supportedC2, "", []string{},
		[]string{}, "", "HTTP", 8080)
	sploit := ExternalSSHTest{}
	exploit.RunProgram(sploit, conf)
}
